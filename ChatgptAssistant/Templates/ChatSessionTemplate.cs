// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ChatgptAssistant.Templates
{
    using ChatgptAssistant.Templates;
    using Microsoft.SemanticKernel;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ChatSessionTemplate : ChatSessionTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<html lang = \"en\" >\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n     " +
                    "   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n     " +
                    "       <title>\r\n                ");
            
            #line 11 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Title));
            
            #line default
            #line hidden
            this.Write("_Chat\r\n            </title>\r\n            <style>\r\n        /* Your CSS styles here" +
                    " */\r\n/* Reset default browser styles */\r\nbody, h1, h2, h3, p {\r\n    margin: 0;\r\n" +
                    "    padding: 0;\r\n}\r\n\r\n/* Set body font and line height */\r\nbody {\r\n  font-family" +
                    ": \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\r\n  line-height: 1.6;\r\n  backg" +
                    "round-color: #f9f9f9;\r\n  color: #333;\r\n  padding: 0 5em;\r\n}\r\n\r\nfooter {\r\n  color" +
                    ": #979797;\r\n  font-size: 12px;\r\n  border-top: 1px solid #ddd;\r\n  text-align: cen" +
                    "ter;\r\n}\r\n\r\n.markdown-content {\r\nbackground-color: #fff;\r\n  padding: 20px;\r\n  min" +
                    "-width: 1080px;\r\n  margin: 0 auto;\r\n  box-shadow: 0 5px 5px #ddd;\r\n  display: fl" +
                    "ex;\r\n  flex-direction: column;\r\n  max-width: 65vw;\r\n}\r\n\r\ncode {\r\n    color: #333" +
                    "535;\r\n    background-color: #f5faff;\r\n    display: inline-block;\r\n    padding: ." +
                    "3em .5em;\r\n    border-radius: 5px;\r\n    border: 1px dashed #a5ccee;\r\n}\r\n\r\n/* Hea" +
                    "dings */\r\nh1, h2, h3 {\r\n    color: #4473a6; /* Blue headings */\r\n    margin-bott" +
                    "om: 10px;\r\n}\r\n\r\n/* Paragraphs */\r\np {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n/* Links *" +
                    "/\r\na {\r\n    color: #007bff; /* Blue links */\r\n    text-decoration: none;\r\n}\r\n\r\na" +
                    ":hover {\r\n    text-decoration: underline;\r\n}\r\n\r\n/* Lists */\r\nul, ol {\r\n    margi" +
                    "n-bottom: 15px;\r\n}\r\n\r\n/* Table */\r\ntable {\r\n    border-collapse: collapse;\r\n    " +
                    "width: 100%;\r\n}\r\n\r\nth, td {\r\n    padding: 8px;\r\n    text-align: left;\r\n    borde" +
                    "r-bottom: 1px solid #ddd; /* Light gray bottom border */\r\n}\r\n\r\nth {\r\n    backgro" +
                    "und-color: #007bff; /* Blue header background */\r\n    color: #fff; /* White text" +
                    " color */\r\n}\r\n\r\n.user {\r\n\r\n}\r\n\r\n.assistant{\r\n\r\n}\r\n\r\n.msgContent {\r\n\r\n}\r\n\r\n.user." +
                    "bubble {\r\nalign-self: flex-end;\r\n  max-width: 85%;\r\n  display: flex;\r\n  flex-dir" +
                    "ection: column;\r\n  align-items: flex-end;\r\n  padding: 5px 12px;\r\n  background: a" +
                    "liceblue;\r\n  border-radius: 5px;\r\n}\r\n\r\n.assistant.bubble {\r\nalign-self: flex-sta" +
                    "rt;\r\n  max-width: 80%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-ite" +
                    "ms: flex-start;\r\n  padding: 5px 12px;\r\n  background: #e4f2ff;\r\n  margin: 20px 0;" +
                    "\r\n  border-radius: 5px;\r\n}\r\n\r\n.assistant.roleTitle {\r\n  font-weight: bold;\r\n  te" +
                    "xt-transform: capitalize;\r\n  color: #0d66b5;\r\n}\r\n\r\n.user.roleTitle {\r\n  font-wei" +
                    "ght: bold;\r\n  text-transform: capitalize;\r\n  color: #5b5b5b;\r\n}\r\n\r\n        /* Ad" +
                    "d more styles as needed */\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n<div Class=\"markdow" +
                    "n-content\">\r\n<h2 style = \"text-align: center;\" >\r\n ");
            
            #line 154 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Title));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n </h1>\r\n\r\n\r\n\r\n");
            
            #line 160 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"

    foreach (KeyValuePair<Guid, ChatgptAssistant.Templates.ChatBubble> kvp in ChatHistory)
    {

            
            #line default
            #line hidden
            this.Write("    <div Class=\"");
            
            #line 164 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value?.Role == "user" ? "user" : "assistant"));
            
            #line default
            #line hidden
            this.Write(" bubble\">\r\n    <div Class=\"");
            
            #line 165 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value?.Role == "user" ? "user" : "assistant"));
            
            #line default
            #line hidden
            this.Write(" roleTitle\">\r\n        ");
            
            #line 166 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value?.Role ?? ""));
            
            #line default
            #line hidden
            this.Write("\r\n    </div>\r\n    <div Class=\"msgContent\"> ");
            
            #line 168 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value?.Message ?? ""));
            
            #line default
            #line hidden
            this.Write("</div>\r\n    </div>\r\n");
            
            #line 170 "C:\Users\Dimuthu.D\source\repos\ChatgptAssistant\ChatgptAssistant\Templates\ChatSessionTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n\r\n<footer>\r\n    Generated With OpenAI ChatGPT API, Semantic libray And .NET\r\n</" +
                    "footer>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ChatSessionTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
